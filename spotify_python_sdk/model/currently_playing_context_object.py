# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spotify_python_sdk import schemas  # noqa: F401


class CurrentlyPlayingContextObject(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def device() -> typing.Type['DeviceObject']:
                return DeviceObject
            repeat_state = schemas.StrSchema
            shuffle_state = schemas.BoolSchema
        
            @staticmethod
            def context() -> typing.Type['ContextObject']:
                return ContextObject
            timestamp = schemas.IntSchema
            progress_ms = schemas.IntSchema
            is_playing = schemas.BoolSchema
            
            
            class item(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TrackObject,
                            EpisodeObject,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'item':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            currently_playing_type = schemas.StrSchema
        
            @staticmethod
            def actions() -> typing.Type['DisallowsObject']:
                return DisallowsObject
            __annotations__ = {
                "device": device,
                "repeat_state": repeat_state,
                "shuffle_state": shuffle_state,
                "context": context,
                "timestamp": timestamp,
                "progress_ms": progress_ms,
                "is_playing": is_playing,
                "item": item,
                "currently_playing_type": currently_playing_type,
                "actions": actions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> 'DeviceObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repeat_state"]) -> MetaOapg.properties.repeat_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shuffle_state"]) -> MetaOapg.properties.shuffle_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> 'ContextObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progress_ms"]) -> MetaOapg.properties.progress_ms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_playing"]) -> MetaOapg.properties.is_playing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["item"]) -> MetaOapg.properties.item: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currently_playing_type"]) -> MetaOapg.properties.currently_playing_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actions"]) -> 'DisallowsObject': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device", "repeat_state", "shuffle_state", "context", "timestamp", "progress_ms", "is_playing", "item", "currently_playing_type", "actions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union['DeviceObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repeat_state"]) -> typing.Union[MetaOapg.properties.repeat_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shuffle_state"]) -> typing.Union[MetaOapg.properties.shuffle_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union['ContextObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progress_ms"]) -> typing.Union[MetaOapg.properties.progress_ms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_playing"]) -> typing.Union[MetaOapg.properties.is_playing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["item"]) -> typing.Union[MetaOapg.properties.item, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currently_playing_type"]) -> typing.Union[MetaOapg.properties.currently_playing_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actions"]) -> typing.Union['DisallowsObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device", "repeat_state", "shuffle_state", "context", "timestamp", "progress_ms", "is_playing", "item", "currently_playing_type", "actions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        device: typing.Union['DeviceObject', schemas.Unset] = schemas.unset,
        repeat_state: typing.Union[MetaOapg.properties.repeat_state, str, schemas.Unset] = schemas.unset,
        shuffle_state: typing.Union[MetaOapg.properties.shuffle_state, bool, schemas.Unset] = schemas.unset,
        context: typing.Union['ContextObject', schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        progress_ms: typing.Union[MetaOapg.properties.progress_ms, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_playing: typing.Union[MetaOapg.properties.is_playing, bool, schemas.Unset] = schemas.unset,
        item: typing.Union[MetaOapg.properties.item, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        currently_playing_type: typing.Union[MetaOapg.properties.currently_playing_type, str, schemas.Unset] = schemas.unset,
        actions: typing.Union['DisallowsObject', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CurrentlyPlayingContextObject':
        return super().__new__(
            cls,
            *args,
            device=device,
            repeat_state=repeat_state,
            shuffle_state=shuffle_state,
            context=context,
            timestamp=timestamp,
            progress_ms=progress_ms,
            is_playing=is_playing,
            item=item,
            currently_playing_type=currently_playing_type,
            actions=actions,
            _configuration=_configuration,
            **kwargs,
        )

from spotify_python_sdk.model.context_object import ContextObject
from spotify_python_sdk.model.device_object import DeviceObject
from spotify_python_sdk.model.disallows_object import DisallowsObject
from spotify_python_sdk.model.episode_object import EpisodeObject
from spotify_python_sdk.model.track_object import TrackObject
