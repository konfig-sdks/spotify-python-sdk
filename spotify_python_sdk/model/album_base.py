# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spotify_python_sdk import schemas  # noqa: F401


class AlbumBase(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "total_tracks",
            "images",
            "release_date",
            "name",
            "available_markets",
            "album_type",
            "release_date_precision",
            "href",
            "id",
            "type",
            "external_urls",
            "uri",
        }
        
        class properties:
            
            
            class album_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "album": "ALBUM",
                        "single": "SINGLE",
                        "compilation": "COMPILATION",
                    }
                
                @schemas.classproperty
                def ALBUM(cls):
                    return cls("album")
                
                @schemas.classproperty
                def SINGLE(cls):
                    return cls("single")
                
                @schemas.classproperty
                def COMPILATION(cls):
                    return cls("compilation")
            total_tracks = schemas.IntSchema
        
            @staticmethod
            def available_markets() -> typing.Type['AlbumBaseAvailableMarkets']:
                return AlbumBaseAvailableMarkets
        
            @staticmethod
            def external_urls() -> typing.Type['ExternalUrlObject']:
                return ExternalUrlObject
            href = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ImageObject']:
                        return ImageObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ImageObject'], typing.List['ImageObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ImageObject':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            release_date = schemas.StrSchema
            
            
            class release_date_precision(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "year": "YEAR",
                        "month": "MONTH",
                        "day": "DAY",
                    }
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("year")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("month")
                
                @schemas.classproperty
                def DAY(cls):
                    return cls("day")
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "album": "ALBUM",
                    }
                
                @schemas.classproperty
                def ALBUM(cls):
                    return cls("album")
            uri = schemas.StrSchema
        
            @staticmethod
            def restrictions() -> typing.Type['AlbumRestrictionObject']:
                return AlbumRestrictionObject
            __annotations__ = {
                "album_type": album_type,
                "total_tracks": total_tracks,
                "available_markets": available_markets,
                "external_urls": external_urls,
                "href": href,
                "id": id,
                "images": images,
                "name": name,
                "release_date": release_date,
                "release_date_precision": release_date_precision,
                "type": type,
                "uri": uri,
                "restrictions": restrictions,
            }
    
    total_tracks: MetaOapg.properties.total_tracks
    images: MetaOapg.properties.images
    release_date: MetaOapg.properties.release_date
    name: MetaOapg.properties.name
    available_markets: 'AlbumBaseAvailableMarkets'
    album_type: MetaOapg.properties.album_type
    release_date_precision: MetaOapg.properties.release_date_precision
    href: MetaOapg.properties.href
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    external_urls: 'ExternalUrlObject'
    uri: MetaOapg.properties.uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["album_type"]) -> MetaOapg.properties.album_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_tracks"]) -> MetaOapg.properties.total_tracks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_markets"]) -> 'AlbumBaseAvailableMarkets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_urls"]) -> 'ExternalUrlObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_date"]) -> MetaOapg.properties.release_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_date_precision"]) -> MetaOapg.properties.release_date_precision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restrictions"]) -> 'AlbumRestrictionObject': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["album_type", "total_tracks", "available_markets", "external_urls", "href", "id", "images", "name", "release_date", "release_date_precision", "type", "uri", "restrictions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["album_type"]) -> MetaOapg.properties.album_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_tracks"]) -> MetaOapg.properties.total_tracks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_markets"]) -> 'AlbumBaseAvailableMarkets': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_urls"]) -> 'ExternalUrlObject': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_date"]) -> MetaOapg.properties.release_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_date_precision"]) -> MetaOapg.properties.release_date_precision: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restrictions"]) -> typing.Union['AlbumRestrictionObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["album_type", "total_tracks", "available_markets", "external_urls", "href", "id", "images", "name", "release_date", "release_date_precision", "type", "uri", "restrictions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total_tracks: typing.Union[MetaOapg.properties.total_tracks, decimal.Decimal, int, ],
        images: typing.Union[MetaOapg.properties.images, list, tuple, ],
        release_date: typing.Union[MetaOapg.properties.release_date, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        available_markets: 'AlbumBaseAvailableMarkets',
        album_type: typing.Union[MetaOapg.properties.album_type, str, ],
        release_date_precision: typing.Union[MetaOapg.properties.release_date_precision, str, ],
        href: typing.Union[MetaOapg.properties.href, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        external_urls: 'ExternalUrlObject',
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        restrictions: typing.Union['AlbumRestrictionObject', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AlbumBase':
        return super().__new__(
            cls,
            *args,
            total_tracks=total_tracks,
            images=images,
            release_date=release_date,
            name=name,
            available_markets=available_markets,
            album_type=album_type,
            release_date_precision=release_date_precision,
            href=href,
            id=id,
            type=type,
            external_urls=external_urls,
            uri=uri,
            restrictions=restrictions,
            _configuration=_configuration,
            **kwargs,
        )

from spotify_python_sdk.model.album_base_available_markets import AlbumBaseAvailableMarkets
from spotify_python_sdk.model.album_restriction_object import AlbumRestrictionObject
from spotify_python_sdk.model.external_url_object import ExternalUrlObject
from spotify_python_sdk.model.image_object import ImageObject
