# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spotify_python_sdk import schemas  # noqa: F401


class AudioFeaturesObject(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class acousticness(
                schemas.Float32Schema
            ):
                pass
            analysis_url = schemas.StrSchema
            danceability = schemas.Float32Schema
            duration_ms = schemas.IntSchema
            energy = schemas.Float32Schema
            id = schemas.StrSchema
            instrumentalness = schemas.Float32Schema
        
            @staticmethod
            def key() -> typing.Type['Key']:
                return Key
            liveness = schemas.Float32Schema
            loudness = schemas.Float32Schema
            mode = schemas.IntSchema
            speechiness = schemas.Float32Schema
            tempo = schemas.Float32Schema
        
            @staticmethod
            def time_signature() -> typing.Type['TimeSignature']:
                return TimeSignature
            track_href = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AUDIO_FEATURES(cls):
                    return cls("audio_features")
            uri = schemas.StrSchema
            
            
            class valence(
                schemas.Float32Schema
            ):
                pass
            __annotations__ = {
                "acousticness": acousticness,
                "analysis_url": analysis_url,
                "danceability": danceability,
                "duration_ms": duration_ms,
                "energy": energy,
                "id": id,
                "instrumentalness": instrumentalness,
                "key": key,
                "liveness": liveness,
                "loudness": loudness,
                "mode": mode,
                "speechiness": speechiness,
                "tempo": tempo,
                "time_signature": time_signature,
                "track_href": track_href,
                "type": type,
                "uri": uri,
                "valence": valence,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acousticness"]) -> MetaOapg.properties.acousticness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analysis_url"]) -> MetaOapg.properties.analysis_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["danceability"]) -> MetaOapg.properties.danceability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration_ms"]) -> MetaOapg.properties.duration_ms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energy"]) -> MetaOapg.properties.energy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instrumentalness"]) -> MetaOapg.properties.instrumentalness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key"]) -> 'Key': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liveness"]) -> MetaOapg.properties.liveness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loudness"]) -> MetaOapg.properties.loudness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speechiness"]) -> MetaOapg.properties.speechiness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tempo"]) -> MetaOapg.properties.tempo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_signature"]) -> 'TimeSignature': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["track_href"]) -> MetaOapg.properties.track_href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valence"]) -> MetaOapg.properties.valence: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acousticness", "analysis_url", "danceability", "duration_ms", "energy", "id", "instrumentalness", "key", "liveness", "loudness", "mode", "speechiness", "tempo", "time_signature", "track_href", "type", "uri", "valence", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acousticness"]) -> typing.Union[MetaOapg.properties.acousticness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analysis_url"]) -> typing.Union[MetaOapg.properties.analysis_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["danceability"]) -> typing.Union[MetaOapg.properties.danceability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration_ms"]) -> typing.Union[MetaOapg.properties.duration_ms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energy"]) -> typing.Union[MetaOapg.properties.energy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instrumentalness"]) -> typing.Union[MetaOapg.properties.instrumentalness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key"]) -> typing.Union['Key', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liveness"]) -> typing.Union[MetaOapg.properties.liveness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loudness"]) -> typing.Union[MetaOapg.properties.loudness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speechiness"]) -> typing.Union[MetaOapg.properties.speechiness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tempo"]) -> typing.Union[MetaOapg.properties.tempo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_signature"]) -> typing.Union['TimeSignature', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["track_href"]) -> typing.Union[MetaOapg.properties.track_href, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valence"]) -> typing.Union[MetaOapg.properties.valence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acousticness", "analysis_url", "danceability", "duration_ms", "energy", "id", "instrumentalness", "key", "liveness", "loudness", "mode", "speechiness", "tempo", "time_signature", "track_href", "type", "uri", "valence", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        acousticness: typing.Union[MetaOapg.properties.acousticness, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        analysis_url: typing.Union[MetaOapg.properties.analysis_url, str, schemas.Unset] = schemas.unset,
        danceability: typing.Union[MetaOapg.properties.danceability, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        duration_ms: typing.Union[MetaOapg.properties.duration_ms, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        energy: typing.Union[MetaOapg.properties.energy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        instrumentalness: typing.Union[MetaOapg.properties.instrumentalness, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        key: typing.Union['Key', schemas.Unset] = schemas.unset,
        liveness: typing.Union[MetaOapg.properties.liveness, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        loudness: typing.Union[MetaOapg.properties.loudness, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mode: typing.Union[MetaOapg.properties.mode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        speechiness: typing.Union[MetaOapg.properties.speechiness, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tempo: typing.Union[MetaOapg.properties.tempo, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        time_signature: typing.Union['TimeSignature', schemas.Unset] = schemas.unset,
        track_href: typing.Union[MetaOapg.properties.track_href, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        valence: typing.Union[MetaOapg.properties.valence, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AudioFeaturesObject':
        return super().__new__(
            cls,
            *args,
            acousticness=acousticness,
            analysis_url=analysis_url,
            danceability=danceability,
            duration_ms=duration_ms,
            energy=energy,
            id=id,
            instrumentalness=instrumentalness,
            key=key,
            liveness=liveness,
            loudness=loudness,
            mode=mode,
            speechiness=speechiness,
            tempo=tempo,
            time_signature=time_signature,
            track_href=track_href,
            type=type,
            uri=uri,
            valence=valence,
            _configuration=_configuration,
            **kwargs,
        )

from spotify_python_sdk.model.key import Key
from spotify_python_sdk.model.time_signature import TimeSignature
