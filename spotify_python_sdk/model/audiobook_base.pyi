# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spotify_python_sdk import schemas  # noqa: F401


class AudiobookBase(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "images",
            "languages",
            "copyrights",
            "available_markets",
            "description",
            "type",
            "html_description",
            "uri",
            "explicit",
            "media_type",
            "name",
            "total_chapters",
            "publisher",
            "href",
            "id",
            "external_urls",
            "authors",
            "narrators",
        }
        
        class properties:
            description = schemas.StrSchema
            
            
            class authors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AuthorObject']:
                        return AuthorObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AuthorObject'], typing.List['AuthorObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AuthorObject':
                    return super().__getitem__(i)
        
            @staticmethod
            def available_markets() -> typing.Type['AudiobookBaseAvailableMarkets']:
                return AudiobookBaseAvailableMarkets
            
            
            class copyrights(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CopyrightObject']:
                        return CopyrightObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CopyrightObject'], typing.List['CopyrightObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'copyrights':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CopyrightObject':
                    return super().__getitem__(i)
            html_description = schemas.StrSchema
            explicit = schemas.BoolSchema
        
            @staticmethod
            def external_urls() -> typing.Type['ExternalUrlObject']:
                return ExternalUrlObject
            href = schemas.StrSchema
            id = schemas.StrSchema
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ImageObject']:
                        return ImageObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ImageObject'], typing.List['ImageObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ImageObject':
                    return super().__getitem__(i)
        
            @staticmethod
            def languages() -> typing.Type['AudiobookBaseLanguages']:
                return AudiobookBaseLanguages
            media_type = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class narrators(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NarratorObject']:
                        return NarratorObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NarratorObject'], typing.List['NarratorObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'narrators':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NarratorObject':
                    return super().__getitem__(i)
            publisher = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AUDIOBOOK(cls):
                    return cls("audiobook")
            uri = schemas.StrSchema
            total_chapters = schemas.IntSchema
            edition = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "authors": authors,
                "available_markets": available_markets,
                "copyrights": copyrights,
                "html_description": html_description,
                "explicit": explicit,
                "external_urls": external_urls,
                "href": href,
                "id": id,
                "images": images,
                "languages": languages,
                "media_type": media_type,
                "name": name,
                "narrators": narrators,
                "publisher": publisher,
                "type": type,
                "uri": uri,
                "total_chapters": total_chapters,
                "edition": edition,
            }
    
    images: MetaOapg.properties.images
    languages: 'AudiobookBaseLanguages'
    copyrights: MetaOapg.properties.copyrights
    available_markets: 'AudiobookBaseAvailableMarkets'
    description: MetaOapg.properties.description
    type: MetaOapg.properties.type
    html_description: MetaOapg.properties.html_description
    uri: MetaOapg.properties.uri
    explicit: MetaOapg.properties.explicit
    media_type: MetaOapg.properties.media_type
    name: MetaOapg.properties.name
    total_chapters: MetaOapg.properties.total_chapters
    publisher: MetaOapg.properties.publisher
    href: MetaOapg.properties.href
    id: MetaOapg.properties.id
    external_urls: 'ExternalUrlObject'
    authors: MetaOapg.properties.authors
    narrators: MetaOapg.properties.narrators
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authors"]) -> MetaOapg.properties.authors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_markets"]) -> 'AudiobookBaseAvailableMarkets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["copyrights"]) -> MetaOapg.properties.copyrights: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["html_description"]) -> MetaOapg.properties.html_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["explicit"]) -> MetaOapg.properties.explicit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_urls"]) -> 'ExternalUrlObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languages"]) -> 'AudiobookBaseLanguages': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["narrators"]) -> MetaOapg.properties.narrators: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publisher"]) -> MetaOapg.properties.publisher: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_chapters"]) -> MetaOapg.properties.total_chapters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edition"]) -> MetaOapg.properties.edition: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "authors", "available_markets", "copyrights", "html_description", "explicit", "external_urls", "href", "id", "images", "languages", "media_type", "name", "narrators", "publisher", "type", "uri", "total_chapters", "edition", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authors"]) -> MetaOapg.properties.authors: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_markets"]) -> 'AudiobookBaseAvailableMarkets': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["copyrights"]) -> MetaOapg.properties.copyrights: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["html_description"]) -> MetaOapg.properties.html_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["explicit"]) -> MetaOapg.properties.explicit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_urls"]) -> 'ExternalUrlObject': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languages"]) -> 'AudiobookBaseLanguages': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["media_type"]) -> MetaOapg.properties.media_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["narrators"]) -> MetaOapg.properties.narrators: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publisher"]) -> MetaOapg.properties.publisher: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_chapters"]) -> MetaOapg.properties.total_chapters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edition"]) -> typing.Union[MetaOapg.properties.edition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "authors", "available_markets", "copyrights", "html_description", "explicit", "external_urls", "href", "id", "images", "languages", "media_type", "name", "narrators", "publisher", "type", "uri", "total_chapters", "edition", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        images: typing.Union[MetaOapg.properties.images, list, tuple, ],
        languages: 'AudiobookBaseLanguages',
        copyrights: typing.Union[MetaOapg.properties.copyrights, list, tuple, ],
        available_markets: 'AudiobookBaseAvailableMarkets',
        description: typing.Union[MetaOapg.properties.description, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        html_description: typing.Union[MetaOapg.properties.html_description, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        explicit: typing.Union[MetaOapg.properties.explicit, bool, ],
        media_type: typing.Union[MetaOapg.properties.media_type, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        total_chapters: typing.Union[MetaOapg.properties.total_chapters, decimal.Decimal, int, ],
        publisher: typing.Union[MetaOapg.properties.publisher, str, ],
        href: typing.Union[MetaOapg.properties.href, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        external_urls: 'ExternalUrlObject',
        authors: typing.Union[MetaOapg.properties.authors, list, tuple, ],
        narrators: typing.Union[MetaOapg.properties.narrators, list, tuple, ],
        edition: typing.Union[MetaOapg.properties.edition, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AudiobookBase':
        return super().__new__(
            cls,
            *args,
            images=images,
            languages=languages,
            copyrights=copyrights,
            available_markets=available_markets,
            description=description,
            type=type,
            html_description=html_description,
            uri=uri,
            explicit=explicit,
            media_type=media_type,
            name=name,
            total_chapters=total_chapters,
            publisher=publisher,
            href=href,
            id=id,
            external_urls=external_urls,
            authors=authors,
            narrators=narrators,
            edition=edition,
            _configuration=_configuration,
            **kwargs,
        )

from spotify_python_sdk.model.audiobook_base_available_markets import AudiobookBaseAvailableMarkets
from spotify_python_sdk.model.audiobook_base_languages import AudiobookBaseLanguages
from spotify_python_sdk.model.author_object import AuthorObject
from spotify_python_sdk.model.copyright_object import CopyrightObject
from spotify_python_sdk.model.external_url_object import ExternalUrlObject
from spotify_python_sdk.model.image_object import ImageObject
from spotify_python_sdk.model.narrator_object import NarratorObject
