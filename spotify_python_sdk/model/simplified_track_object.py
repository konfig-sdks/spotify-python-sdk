# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spotify_python_sdk import schemas  # noqa: F401


class SimplifiedTrackObject(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class artists(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SimplifiedArtistObject']:
                        return SimplifiedArtistObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SimplifiedArtistObject'], typing.List['SimplifiedArtistObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'artists':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SimplifiedArtistObject':
                    return super().__getitem__(i)
        
            @staticmethod
            def available_markets() -> typing.Type['SimplifiedTrackObjectAvailableMarkets']:
                return SimplifiedTrackObjectAvailableMarkets
            disc_number = schemas.IntSchema
            duration_ms = schemas.IntSchema
            explicit = schemas.BoolSchema
        
            @staticmethod
            def external_urls() -> typing.Type['ExternalUrlObject']:
                return ExternalUrlObject
            href = schemas.StrSchema
            id = schemas.StrSchema
            is_playable = schemas.BoolSchema
        
            @staticmethod
            def linked_from() -> typing.Type['LinkedTrackObject']:
                return LinkedTrackObject
        
            @staticmethod
            def restrictions() -> typing.Type['TrackRestrictionObject']:
                return TrackRestrictionObject
            name = schemas.StrSchema
            
            
            class preview_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'preview_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            track_number = schemas.IntSchema
            type = schemas.StrSchema
            uri = schemas.StrSchema
            is_local = schemas.BoolSchema
            __annotations__ = {
                "artists": artists,
                "available_markets": available_markets,
                "disc_number": disc_number,
                "duration_ms": duration_ms,
                "explicit": explicit,
                "external_urls": external_urls,
                "href": href,
                "id": id,
                "is_playable": is_playable,
                "linked_from": linked_from,
                "restrictions": restrictions,
                "name": name,
                "preview_url": preview_url,
                "track_number": track_number,
                "type": type,
                "uri": uri,
                "is_local": is_local,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["artists"]) -> MetaOapg.properties.artists: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_markets"]) -> 'SimplifiedTrackObjectAvailableMarkets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disc_number"]) -> MetaOapg.properties.disc_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration_ms"]) -> MetaOapg.properties.duration_ms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["explicit"]) -> MetaOapg.properties.explicit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_urls"]) -> 'ExternalUrlObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_playable"]) -> MetaOapg.properties.is_playable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linked_from"]) -> 'LinkedTrackObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restrictions"]) -> 'TrackRestrictionObject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preview_url"]) -> MetaOapg.properties.preview_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["track_number"]) -> MetaOapg.properties.track_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_local"]) -> MetaOapg.properties.is_local: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["artists", "available_markets", "disc_number", "duration_ms", "explicit", "external_urls", "href", "id", "is_playable", "linked_from", "restrictions", "name", "preview_url", "track_number", "type", "uri", "is_local", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["artists"]) -> typing.Union[MetaOapg.properties.artists, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_markets"]) -> typing.Union['SimplifiedTrackObjectAvailableMarkets', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disc_number"]) -> typing.Union[MetaOapg.properties.disc_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration_ms"]) -> typing.Union[MetaOapg.properties.duration_ms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["explicit"]) -> typing.Union[MetaOapg.properties.explicit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_urls"]) -> typing.Union['ExternalUrlObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> typing.Union[MetaOapg.properties.href, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_playable"]) -> typing.Union[MetaOapg.properties.is_playable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linked_from"]) -> typing.Union['LinkedTrackObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restrictions"]) -> typing.Union['TrackRestrictionObject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preview_url"]) -> typing.Union[MetaOapg.properties.preview_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["track_number"]) -> typing.Union[MetaOapg.properties.track_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_local"]) -> typing.Union[MetaOapg.properties.is_local, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["artists", "available_markets", "disc_number", "duration_ms", "explicit", "external_urls", "href", "id", "is_playable", "linked_from", "restrictions", "name", "preview_url", "track_number", "type", "uri", "is_local", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        artists: typing.Union[MetaOapg.properties.artists, list, tuple, schemas.Unset] = schemas.unset,
        available_markets: typing.Union['SimplifiedTrackObjectAvailableMarkets', schemas.Unset] = schemas.unset,
        disc_number: typing.Union[MetaOapg.properties.disc_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        duration_ms: typing.Union[MetaOapg.properties.duration_ms, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        explicit: typing.Union[MetaOapg.properties.explicit, bool, schemas.Unset] = schemas.unset,
        external_urls: typing.Union['ExternalUrlObject', schemas.Unset] = schemas.unset,
        href: typing.Union[MetaOapg.properties.href, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        is_playable: typing.Union[MetaOapg.properties.is_playable, bool, schemas.Unset] = schemas.unset,
        linked_from: typing.Union['LinkedTrackObject', schemas.Unset] = schemas.unset,
        restrictions: typing.Union['TrackRestrictionObject', schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        preview_url: typing.Union[MetaOapg.properties.preview_url, None, str, schemas.Unset] = schemas.unset,
        track_number: typing.Union[MetaOapg.properties.track_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        is_local: typing.Union[MetaOapg.properties.is_local, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SimplifiedTrackObject':
        return super().__new__(
            cls,
            *args,
            artists=artists,
            available_markets=available_markets,
            disc_number=disc_number,
            duration_ms=duration_ms,
            explicit=explicit,
            external_urls=external_urls,
            href=href,
            id=id,
            is_playable=is_playable,
            linked_from=linked_from,
            restrictions=restrictions,
            name=name,
            preview_url=preview_url,
            track_number=track_number,
            type=type,
            uri=uri,
            is_local=is_local,
            _configuration=_configuration,
            **kwargs,
        )

from spotify_python_sdk.model.external_url_object import ExternalUrlObject
from spotify_python_sdk.model.linked_track_object import LinkedTrackObject
from spotify_python_sdk.model.simplified_artist_object import SimplifiedArtistObject
from spotify_python_sdk.model.simplified_track_object_available_markets import SimplifiedTrackObjectAvailableMarkets
from spotify_python_sdk.model.track_restriction_object import TrackRestrictionObject
