# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spotify_python_sdk import schemas  # noqa: F401


class AlbumObject(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "artists",
            "copyrights",
            "genres",
            "popularity",
            "label",
            "external_ids",
            "tracks",
        }
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class artists(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['SimplifiedArtistObject']:
                                return SimplifiedArtistObject
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['SimplifiedArtistObject'], typing.List['SimplifiedArtistObject']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'artists':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'SimplifiedArtistObject':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def tracks() -> typing.Type['PagingSimplifiedTrackObject']:
                        return PagingSimplifiedTrackObject
                    
                    
                    class copyrights(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['CopyrightObject']:
                                return CopyrightObject
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['CopyrightObject'], typing.List['CopyrightObject']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'copyrights':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'CopyrightObject':
                            return super().__getitem__(i)
                
                    @staticmethod
                    def external_ids() -> typing.Type['ExternalIdObject']:
                        return ExternalIdObject
                    
                    
                    class genres(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'genres':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    label = schemas.StrSchema
                    popularity = schemas.IntSchema
                    __annotations__ = {
                        "artists": artists,
                        "tracks": tracks,
                        "copyrights": copyrights,
                        "external_ids": external_ids,
                        "genres": genres,
                        "label": label,
                        "popularity": popularity,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["artists"]) -> MetaOapg.properties.artists: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["tracks"]) -> 'PagingSimplifiedTrackObject': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["copyrights"]) -> MetaOapg.properties.copyrights: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["external_ids"]) -> 'ExternalIdObject': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["genres"]) -> MetaOapg.properties.genres: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["popularity"]) -> MetaOapg.properties.popularity: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["artists", "tracks", "copyrights", "external_ids", "genres", "label", "popularity", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["artists"]) -> typing.Union[MetaOapg.properties.artists, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["tracks"]) -> typing.Union['PagingSimplifiedTrackObject', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["copyrights"]) -> typing.Union[MetaOapg.properties.copyrights, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["external_ids"]) -> typing.Union['ExternalIdObject', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["genres"]) -> typing.Union[MetaOapg.properties.genres, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["popularity"]) -> typing.Union[MetaOapg.properties.popularity, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["artists", "tracks", "copyrights", "external_ids", "genres", "label", "popularity", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                artists: typing.Union[MetaOapg.properties.artists, list, tuple, schemas.Unset] = schemas.unset,
                tracks: typing.Union['PagingSimplifiedTrackObject', schemas.Unset] = schemas.unset,
                copyrights: typing.Union[MetaOapg.properties.copyrights, list, tuple, schemas.Unset] = schemas.unset,
                external_ids: typing.Union['ExternalIdObject', schemas.Unset] = schemas.unset,
                genres: typing.Union[MetaOapg.properties.genres, list, tuple, schemas.Unset] = schemas.unset,
                label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
                popularity: typing.Union[MetaOapg.properties.popularity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    artists=artists,
                    tracks=tracks,
                    copyrights=copyrights,
                    external_ids=external_ids,
                    genres=genres,
                    label=label,
                    popularity=popularity,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AlbumBase,
                cls.all_of_1,
            ]

    
    artists: schemas.AnyTypeSchema
    copyrights: schemas.AnyTypeSchema
    genres: schemas.AnyTypeSchema
    popularity: schemas.AnyTypeSchema
    label: schemas.AnyTypeSchema
    external_ids: schemas.AnyTypeSchema
    tracks: schemas.AnyTypeSchema

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AlbumObject':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from spotify_python_sdk.model.album_base import AlbumBase
from spotify_python_sdk.model.copyright_object import CopyrightObject
from spotify_python_sdk.model.external_id_object import ExternalIdObject
from spotify_python_sdk.model.paging_simplified_track_object import PagingSimplifiedTrackObject
from spotify_python_sdk.model.simplified_artist_object import SimplifiedArtistObject
