# coding: utf-8

"""
    Spotify Web API

    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 

    The version of the OpenAPI document: 1.0.0
    Created by: https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from spotify_python_sdk import schemas  # noqa: F401


class AudioAnalysisObject(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def meta() -> typing.Type['AudioAnalysisObjectMeta']:
                return AudioAnalysisObjectMeta
        
            @staticmethod
            def track() -> typing.Type['AudioAnalysisObjectTrack']:
                return AudioAnalysisObjectTrack
            
            
            class bars(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TimeIntervalObject']:
                        return TimeIntervalObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TimeIntervalObject'], typing.List['TimeIntervalObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bars':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TimeIntervalObject':
                    return super().__getitem__(i)
            
            
            class beats(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TimeIntervalObject']:
                        return TimeIntervalObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TimeIntervalObject'], typing.List['TimeIntervalObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'beats':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TimeIntervalObject':
                    return super().__getitem__(i)
            
            
            class sections(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SectionObject']:
                        return SectionObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SectionObject'], typing.List['SectionObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sections':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SectionObject':
                    return super().__getitem__(i)
            
            
            class segments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SegmentObject']:
                        return SegmentObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SegmentObject'], typing.List['SegmentObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'segments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SegmentObject':
                    return super().__getitem__(i)
            
            
            class tatums(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TimeIntervalObject']:
                        return TimeIntervalObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TimeIntervalObject'], typing.List['TimeIntervalObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tatums':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TimeIntervalObject':
                    return super().__getitem__(i)
            __annotations__ = {
                "meta": meta,
                "track": track,
                "bars": bars,
                "beats": beats,
                "sections": sections,
                "segments": segments,
                "tatums": tatums,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> 'AudioAnalysisObjectMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["track"]) -> 'AudioAnalysisObjectTrack': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bars"]) -> MetaOapg.properties.bars: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beats"]) -> MetaOapg.properties.beats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sections"]) -> MetaOapg.properties.sections: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segments"]) -> MetaOapg.properties.segments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tatums"]) -> MetaOapg.properties.tatums: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["meta", "track", "bars", "beats", "sections", "segments", "tatums", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> typing.Union['AudioAnalysisObjectMeta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["track"]) -> typing.Union['AudioAnalysisObjectTrack', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bars"]) -> typing.Union[MetaOapg.properties.bars, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beats"]) -> typing.Union[MetaOapg.properties.beats, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sections"]) -> typing.Union[MetaOapg.properties.sections, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segments"]) -> typing.Union[MetaOapg.properties.segments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tatums"]) -> typing.Union[MetaOapg.properties.tatums, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meta", "track", "bars", "beats", "sections", "segments", "tatums", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        meta: typing.Union['AudioAnalysisObjectMeta', schemas.Unset] = schemas.unset,
        track: typing.Union['AudioAnalysisObjectTrack', schemas.Unset] = schemas.unset,
        bars: typing.Union[MetaOapg.properties.bars, list, tuple, schemas.Unset] = schemas.unset,
        beats: typing.Union[MetaOapg.properties.beats, list, tuple, schemas.Unset] = schemas.unset,
        sections: typing.Union[MetaOapg.properties.sections, list, tuple, schemas.Unset] = schemas.unset,
        segments: typing.Union[MetaOapg.properties.segments, list, tuple, schemas.Unset] = schemas.unset,
        tatums: typing.Union[MetaOapg.properties.tatums, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AudioAnalysisObject':
        return super().__new__(
            cls,
            *args,
            meta=meta,
            track=track,
            bars=bars,
            beats=beats,
            sections=sections,
            segments=segments,
            tatums=tatums,
            _configuration=_configuration,
            **kwargs,
        )

from spotify_python_sdk.model.audio_analysis_object_meta import AudioAnalysisObjectMeta
from spotify_python_sdk.model.audio_analysis_object_track import AudioAnalysisObjectTrack
from spotify_python_sdk.model.section_object import SectionObject
from spotify_python_sdk.model.segment_object import SegmentObject
from spotify_python_sdk.model.time_interval_object import TimeIntervalObject
